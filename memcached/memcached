#!/usr/bin/env ruby
require File.dirname(__FILE__) + "/lib/server/memory_allocation"
require 'socket'
user_control = {}
ARGV.each_with_index do|a, i|
  if a.size == 2 && a[0] == '-'
    user_control[a[1].to_sym] = ARGV[i+1]
  elsif a[0] == '-'
    user_control[a[1].to_sym] = a[2..-1]
  end
end
MEMORY = user_control[:m]
LOG = user_control[:v]
user_control[:p] ||= 2000

server = TCPServer.new(user_control[:p])
puts "Starting up server on port #{user_control[:p]}"
# setup to listen and accept connections
while (session = server.accept)

 Thread.start do

   request = session.gets.chomp

p formated_request = process_request(request)
begin
p test_var = CachedMemory.new.send(formated_request[0], formated_request[1], formated_request[2])
rescue Exception => e
  puts e.inspect
  end
   ## Lets respond with a nice warm welcome message
   session.puts test_var
   # reply with goodbye
   ## now lets end the session since all we wanted to do is
   ## acknowledge the client
   puts "log: sending goodbye"
   session.puts "Server: Goodbye\n"
 end  #end thread conversation

 private

 def process_request(request)

    method_hash = Hash[request.split(",").collect{|x| x.strip.split("=>")}]

    case method_hash['method']
    when 'get'
      return 'get', method_hash['key']
    when 'set'
      return 'set', method_hash['key'], method_hash['value']
    when 'flush'
      return 'flush'
    else
      return 'other'
    end
 end

end   #end loop
