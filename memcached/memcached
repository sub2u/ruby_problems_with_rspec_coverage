#!/usr/bin/env ruby
require File.dirname(__FILE__) + "/lib/server/memory_allocation"
require 'socket'

class Memcached

  attr_reader :memory, :log, :port

  def initialize(user_control)
    @memory = user_control.has_key?(:m) ? user_control[:m].to_i : -1
    @log = user_control[:v]
    @port = user_control[:p] ||= 2000
  end

  def start_server
    server = TCPServer.new(port)
    puts "Starting up server on port #{port}"
    # setup to listen and accept connections
    while (session = server.accept)

      Thread.start do

        request = session.gets.chomp
        formated_request = process_request(request)
        catched_obj = CachedMemory.new

        if formated_request[0] == "set"
          responce = catched_obj.send(formated_request[0], memory, log, formated_request[1].to_sym, formated_request[2])
        elsif formated_request[2].nil?
          responce = catched_obj.send(formated_request[0], log, formated_request[1].to_sym)
        else
          responce = catched_obj.send(formated_request, log)
        end

        ## Lets respond with a nice warm welcome message
        session.puts responce

        session.puts "Server: Goodbye\n"
      end  #end thread conversation

    end   #end loop
  end

  private

  def process_request(request)

    method_hash = Hash[request.split(",").collect{|x| x.strip.split("=>")}]

    case method_hash['method']
    when 'get'
      return 'get', method_hash['key']
    when 'set'
      return 'set', method_hash['key'], method_hash['value']
    when 'flush'
      return 'flush'
    else
      return 'other'
    end
  end

end

user_control = {}

ARGV.each_with_index do|a, i|
  if a.size == 2 && a[0] == '-'
    user_control[a[1].to_sym] = ARGV[i+1]
  elsif a[0] == '-'
    user_control[a[1].to_sym] = a[2..-1]
  end
end

mc_server = Memcached.new(user_control)
mc_server.start_server