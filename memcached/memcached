#!/usr/bin/env ruby
require 'socket'
user_control = {}
ARGV.each_with_index do|a, i|
  if a.size == 2 && a[0] == '-'
    user_control[a[1].to_sym] = ARGV[i+1]
  elsif a[0] == '-'
    user_control[a[1].to_sym] = a[2..-1]
  end
end
MEMORY = user_control[:m]
LOG = user_control[:v]
user_control[:p] ||= 2000 
server = TCPServer.new(user_control[:p])
puts "Starting up server on port #{user_control[:p]}"
# setup to listen and accept connections
while (session = server.accept)
 #start new thread conversation
 ## Here we will establish a new thread for a connection client
 Thread.start do
   ## I want to be sure to output something on the server side
   ## to show that there has been a connection
   puts "log: Connection from #{session.peeraddr[2]} at
          #{session.peeraddr[3]}"
   puts "log: got input from client"
   ## lets see what the client has to say by grabbing the input
   ## then display it. Please note that the session.gets will look
   ## for an end of line character "\n" before moving forward.
   input = session.gets.chomp
   puts input.inspect
p test_var << Mymap.new.send('set','hi',30)
   ## Lets respond with a nice warm welcome message
   session.puts test_var
   # reply with goodbye
   ## now lets end the session since all we wanted to do is
   ## acknowledge the client
   puts "log: sending goodbye"
   session.puts "Server: Goodbye\n"
 end  #end thread conversation
end   #end loop
